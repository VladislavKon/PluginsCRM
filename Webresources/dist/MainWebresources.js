var WebResources;(()=>{"use strict";var e={"./node_modules/css-loader/dist/cjs.js!./Webresources/src/Style.css":(e,t,r)=>{r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/css-loader/dist/runtime/cssWithMappingToString.js"),o=r.n(n),i=r("./node_modules/css-loader/dist/runtime/api.js"),s=r.n(i)()(o());s.push([e.id,"html {\r\n    background: linear-gradient(to bottom right, #FFA49D, #C6FFFC) no-repeat center center fixed;\r\n    -webkit-background-size: cover;\r\n    -moz-background-size: cover;\r\n    -o-background-size: cover;    \r\n    background-size: cover;\r\n    font-family: cursive;\r\n    font-style: initial;\r\n}\r\n.table {\r\n    border-style: inset;\r\n    padding: 4px;\r\n    border-radius: 10px;\r\n    width: 100%;\r\n}\r\n.cell {\r\n    border-style: inset;\r\n    padding: 2px;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n    font-size: small;\r\n    width: 25%;\r\n}\r\n.cell2 {\r\n    border-style: inset;\r\n    padding: 2px;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n    font-size: small;\r\n    width: 50%;\r\n}\r\n\r\n    \r\n","",{version:3,sources:["webpack://./Webresources/src/Style.css"],names:[],mappings:"AAAA;IACI,4FAA4F;IAC5F,8BAA8B;IAC9B,2BAA2B;IAC3B,yBAAyB;IACzB,sBAAsB;IACtB,oBAAoB;IACpB,mBAAmB;AACvB;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,mBAAmB;IACnB,WAAW;AACf;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,gBAAgB;IAChB,UAAU;AACd;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,gBAAgB;IAChB,UAAU;AACd",sourcesContent:["html {\r\n    background: linear-gradient(to bottom right, #FFA49D, #C6FFFC) no-repeat center center fixed;\r\n    -webkit-background-size: cover;\r\n    -moz-background-size: cover;\r\n    -o-background-size: cover;    \r\n    background-size: cover;\r\n    font-family: cursive;\r\n    font-style: initial;\r\n}\r\n.table {\r\n    border-style: inset;\r\n    padding: 4px;\r\n    border-radius: 10px;\r\n    width: 100%;\r\n}\r\n.cell {\r\n    border-style: inset;\r\n    padding: 2px;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n    font-size: small;\r\n    width: 25%;\r\n}\r\n.cell2 {\r\n    border-style: inset;\r\n    padding: 2px;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n    font-size: small;\r\n    width: 50%;\r\n}\r\n\r\n    \r\n"],sourceRoot:""}]);const a=s},"./node_modules/css-loader/dist/runtime/api.js":e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=e(t);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(n)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);n&&o[l[0]]||(r&&(l[2]?l[2]="".concat(r," and ").concat(l[2]):l[2]=r),t.push(l))}},t}},"./node_modules/css-loader/dist/runtime/cssWithMappingToString.js":e=>{function t(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==r)return;var n,o,i=[],s=!0,a=!1;try{for(r=r.call(e);!(s=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);s=!0);}catch(e){a=!0,o=e}finally{try{s||null==r.return||r.return()}finally{if(a)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}e.exports=function(e){var r=t(e,4),n=r[1],o=r[3];if(!o)return n;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),a="/*# ".concat(s," */"),l=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[n].concat(l).concat([a]).join("\n")}return[n].join("\n")}},"./Webresources/src/Style.css":(e,t,r)=>{r.r(t),r.d(t,{default:()=>b});var n=r("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),o=r.n(n),i=r("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),s=r.n(i),a=r("./node_modules/style-loader/dist/runtime/insertBySelector.js"),l=r.n(a),u=r("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),c=r.n(u),d=r("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),f=r.n(d),m=r("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),A=r.n(m),p=r("./node_modules/css-loader/dist/cjs.js!./Webresources/src/Style.css"),y={};y.styleTagTransform=A(),y.setAttributes=c(),y.insert=l().bind(null,"head"),y.domAPI=s(),y.insertStyleElement=f();o()(p.default,y);const b=p.default&&p.default.locals?p.default.locals:void 0},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var i={},s=[],a=0;a<e.length;a++){var l=e[a],u=n.base?l[0]+n.base:l[0],c=i[u]||0,d="".concat(u," ").concat(c);i[u]=c+1;var f=r(d),m={css:l[1],media:l[2],sourceMap:l[3]};-1!==f?(t[f].references++,t[f].updater(m)):t.push({identifier:d,updater:o(m,n),references:1}),s.push(d)}return s}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var i=n(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=r(i[s]);t[a].references--}for(var l=n(e,o),u=0;u<i.length;u++){var c=r(i[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n=r.css,o=r.media,i=r.sourceMap;o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(n,e)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},"./Webresources/src/FilterLookup.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.filterLookup=void 0,t.filterLookup=function(e){try{var t=e.getFormContext();null!=t.getControl("new_region")&&null!=t.getControl("new_region")&&t.getControl("new_city").addPreSearch((function(){!function(e){try{var t=e.getAttribute("new_region").getValue();if(null!=t&&null!=t){var r="<filter type='and'><condition attribute='new_regionlookup' operator='eq' value='"+t[0].id+"' /></filter>";e.getControl("new_city").addCustomFilter(r)}}catch(e){throw new Error(e.Message)}}(t)}))}catch(e){throw new Error(e.Message)}}},"./Webresources/src/IframeAnnotation.ts":(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DeleteAnno=t.GetAnnotations=void 0,r("./Webresources/src/Style.css"),t.GetAnnotations=function e(){try{var t=window.parent,r=document.getElementById("myTable"),n=t.Xrm.Page.data.entity.getId(),o="&$filter=_objectid_value eq '"+n+"'";t.Xrm.WebApi.retrieveMultipleRecords("annotation","?$select=_objectid_value, notetext, subject, annotationid"+o).then((function(t){if(null!=t&&r.childNodes.length!=t.entities.length){if(r.childNodes.length>0)for(;r.hasChildNodes();)r.removeChild(r.childNodes[0]);new Promise(void 0).then((function(){setTimeout((function(){return e()}),2e3)}))}else setTimeout((function(){return e()}),2e3)}))}catch(e){throw new Error(e.Message)}},t.DeleteAnno=function(e){window.parent.Xrm.WebApi.deleteRecord("annotation",e).then((function(){location.reload()}))}},"./Webresources/src/Main.ts":function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.iframe=t.filter=void 0;var s=i(r("./Webresources/src/FilterLookup.ts")),a=i(r("./Webresources/src/IframeAnnotation.ts"));!function(e){e.filterCity=s.filterLookup}(t.filter||(t.filter={})),function(e){e.GetAnnotations=a.GetAnnotations,e.DeleteAnno=a.DeleteAnno}(t.iframe||(t.iframe={}))}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={id:n,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n=r("./Webresources/src/Main.ts");WebResources=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,