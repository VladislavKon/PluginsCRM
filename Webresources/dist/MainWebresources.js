var WebResources;(()=>{"use strict";var e={"./node_modules/css-loader/dist/cjs.js!./Webresources/src/Style.css":(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var r=n("./node_modules/css-loader/dist/runtime/cssWithMappingToString.js"),o=n.n(r),i=n("./node_modules/css-loader/dist/runtime/api.js"),s=n.n(i)()(o());s.push([e.id,"html {\r\n    background: linear-gradient(to bottom right, #FFA49D, #C6FFFC) no-repeat center center fixed;\r\n    -webkit-background-size: cover;\r\n    -moz-background-size: cover;\r\n    -o-background-size: cover;    \r\n    background-size: cover;\r\n    font-family: cursive;\r\n    font-style: initial;\r\n}\r\n.table {\r\n    border-style: inset;\r\n    padding: 4px;\r\n    border-radius: 10px;\r\n    width: 100%;\r\n}\r\n.cell {\r\n    border-style: inset;\r\n    padding: 2px;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n    font-size: small;\r\n    width: 25%;\r\n}\r\n.cell2 {\r\n    border-style: inset;\r\n    padding: 2px;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n    font-size: small;\r\n    width: 50%;\r\n}\r\n\r\n    \r\n","",{version:3,sources:["webpack://./Webresources/src/Style.css"],names:[],mappings:"AAAA;IACI,4FAA4F;IAC5F,8BAA8B;IAC9B,2BAA2B;IAC3B,yBAAyB;IACzB,sBAAsB;IACtB,oBAAoB;IACpB,mBAAmB;AACvB;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,mBAAmB;IACnB,WAAW;AACf;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,gBAAgB;IAChB,UAAU;AACd;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,gBAAgB;IAChB,UAAU;AACd",sourcesContent:["html {\r\n    background: linear-gradient(to bottom right, #FFA49D, #C6FFFC) no-repeat center center fixed;\r\n    -webkit-background-size: cover;\r\n    -moz-background-size: cover;\r\n    -o-background-size: cover;    \r\n    background-size: cover;\r\n    font-family: cursive;\r\n    font-style: initial;\r\n}\r\n.table {\r\n    border-style: inset;\r\n    padding: 4px;\r\n    border-radius: 10px;\r\n    width: 100%;\r\n}\r\n.cell {\r\n    border-style: inset;\r\n    padding: 2px;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n    font-size: small;\r\n    width: 25%;\r\n}\r\n.cell2 {\r\n    border-style: inset;\r\n    padding: 2px;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n    font-size: small;\r\n    width: 50%;\r\n}\r\n\r\n    \r\n"],sourceRoot:""}]);const a=s},"./node_modules/css-loader/dist/runtime/api.js":e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},"./node_modules/css-loader/dist/runtime/cssWithMappingToString.js":e=>{function t(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,i=[],s=!0,a=!1;try{for(n=n.call(e);!(s=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);s=!0);}catch(e){a=!0,o=e}finally{try{s||null==n.return||n.return()}finally{if(a)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n=t(e,4),r=n[1],o=n[3];if(!o)return r;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),a="/*# ".concat(s," */"),l=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[r].concat(l).concat([a]).join("\n")}return[r].join("\n")}},"./Webresources/src/Style.css":(e,t,n)=>{n.r(t),n.d(t,{default:()=>y});var r=n("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),o=n.n(r),i=n("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),s=n.n(i),a=n("./node_modules/style-loader/dist/runtime/insertBySelector.js"),l=n.n(a),u=n("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),c=n.n(u),d=n("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),f=n.n(d),p=n("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),m=n.n(p),A=n("./node_modules/css-loader/dist/cjs.js!./Webresources/src/Style.css"),b={};b.styleTagTransform=m(),b.setAttributes=c(),b.insert=l().bind(null,"head"),b.domAPI=s(),b.insertStyleElement=f();o()(A.default,b);const y=A.default&&A.default.locals?A.default.locals:void 0},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},s=[],a=0;a<e.length;a++){var l=e[a],u=r.base?l[0]+r.base:l[0],c=i[u]||0,d="".concat(u," ").concat(c);i[u]=c+1;var f=n(d),p={css:l[1],media:l[2],sourceMap:l[3]};-1!==f?(t[f].references++,t[f].updater(p)):t.push({identifier:d,updater:o(p,r),references:1}),s.push(d)}return s}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=n(i[s]);t[a].references--}for(var l=r(e,o),u=0;u<i.length;u++){var c=n(i[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},"./Webresources/src/FilterLookup.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.filterLookup=void 0,t.filterLookup=function(e){try{var t=e.getFormContext();null!=t.getControl("new_region")&&null!=t.getControl("new_region")&&t.getControl("new_city").addPreSearch((function(){!function(e){try{var t=e.getAttribute("new_region").getValue();if(null!=t&&null!=t){var n="<filter type='and'><condition attribute='new_regionlookup' operator='eq' value='"+t[0].id+"' /></filter>";e.getControl("new_city").addCustomFilter(n)}}catch(e){throw new Error(e.Message)}}(t)}))}catch(e){throw new Error(e.Message)}}},"./Webresources/src/IframeAnnotation.ts":function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{l(r.next(e))}catch(e){i(e)}}function a(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};function i(e){var t=document.getElementById("myTable");e.forEach((function(e){var n=document.createElement("tr"),r=document.createElement("td"),o=document.createElement("td"),i=document.createElement("td"),s=document.createElement("button");r.innerText=e.subject,o.innerHTML=e.notetext,s.innerText="Удалить",n.setAttribute("class","cell"),r.setAttribute("class","cell"),o.setAttribute("class","cell2"),i.setAttribute("class","cell"),i.setAttribute("align","center"),s.setAttribute("value",e.annotationid),s.setAttribute("onclick","WebResources.iframe.deleteAnno(this.value)"),i.appendChild(s),t.appendChild(n),t.appendChild(r),t.appendChild(o),t.appendChild(i)}))}Object.defineProperty(t,"__esModule",{value:!0}),t.DeleteAnno=t.GetAnnotations=void 0,n("./Webresources/src/Style.css"),t.GetAnnotations=function e(){try{var t=window.parent,n=document.getElementById("myTable"),s=t.Xrm.Page.data.entity.getId(),a="&$filter=_objectid_value eq '"+s+"'";t.Xrm.WebApi.retrieveMultipleRecords("annotation","?$select=_objectid_value, notetext, subject, annotationid, createdon"+a).then((function(t){return r(this,void 0,void 0,(function(){return o(this,(function(r){switch(r.label){case 0:if(null==t||n.childNodes.length==t.entities.length)return[3,2];if(n.childNodes.length>0)for(;n.hasChildNodes();)n.removeChild(n.childNodes[0]);return[4,i(t.entities.sort((function(e,t){return e.createdon>t.createdon?1:e.createdon<t.createdon?-1:0})))];case 1:return r.sent(),setTimeout((function(){return e()}),4e3),[3,3];case 2:setTimeout((function(){return e()}),4e3),r.label=3;case 3:return[2]}}))}))}))}catch(e){throw new Error(e.Message)}},t.DeleteAnno=function(e){window.parent.Xrm.WebApi.deleteRecord("annotation",e).then((function(){location.reload()}))}},"./Webresources/src/Main.ts":function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.iframe=t.filter=void 0;var s=i(n("./Webresources/src/FilterLookup.ts")),a=i(n("./Webresources/src/IframeAnnotation.ts"));!function(e){e.filterCity=s.filterLookup}(t.filter||(t.filter={})),function(e){e.getAnnotations=a.GetAnnotations,e.deleteAnno=a.DeleteAnno}(t.iframe||(t.iframe={}))}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r=n("./Webresources/src/Main.ts");WebResources=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,